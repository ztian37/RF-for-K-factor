# load library
library(raster)
library(randomForest)

# read the sampling data
taihu <- read.csv("envi_factors.csv")
taihu <- na.omit(taihu)

# build the model
rf0 <- randomForest((K)~., data=taihu, ntree=500, mtry=2, importance=TRUE, proximity=TRUE)
rf0

# Predict raster
forest_prob <- raster::predict(rf0, object=ApPl_stack, interval="confidence", level=0.90) 
plot(forest_prob)

# save the predictions
writeRaster(forest_prob,'randomForest4K.tif', overwrite=TRUE)

# uncertainty analysis
pred <- rfinterval(K~., train_data = taihu, test_data = v1,
                 method = c("oob"), # "split-conformal", "quantreg"
                 symmetry = TRUE,alpha = 0.10) # 90% prediction interval
lower <- c(pred$oob_interval$lower)
upper <- c(pred$oob_interval$upper)

rf_lower <- raster(nrow=4237, ncol=3138, ext=extent(115.8043, 122.8502, 23.07993, 32.59267), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
values(rf_lower) <- lower
plot(rf_lower)
writeRaster(rf_lower,'randomForestLower.tif', overwrite=TRUE)

rf_upper <- raster(nrow=4237, ncol=3138, ext=extent(115.8043, 122.8502, 23.07993, 32.59267), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
values(rf_upper) <- upper
plot(rf_upper)
writeRaster(rf_upper,'randomForestUpper.tif', overwrite=TRUE)

# uncertainty
rf_uncertainty <- raster(nrow=4237, ncol=3138, ext=extent(115.8043, 122.8502, 23.07993, 32.59267), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
mean <- getValues(forest_prob)
values(rf_uncertainty) <- (upper-lower)/mean
plot(rf_uncertainty)
writeRaster(rf_uncertainty,'randomForestUncertainty.tif', overwrite=TRUE)
